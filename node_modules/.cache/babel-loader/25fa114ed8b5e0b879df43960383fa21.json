{"ast":null,"code":"var _jsxFileName = \"/Users/cameronaragon/NFT/buildspace-nft/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'camaragoon';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xe293010D86817550e47556954A5285c91A10AE50\";\n\nconst App = () => {\n  _s();\n\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMintedNFTs, setTotalMintedNFTs] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [isNFTMinted, setIsNFTMinted] = useState(false);\n  const [currentOpenSeaLink, setCurrentOpenSeaLink] = useState(\"\");\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getNFTData();\n  }, []);\n\n  const getNFTData = async () => {\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n    let countMintedNFTs = await connectedContract.getTotalNFTsMintedSoFar();\n    setTotalMintedNFTs(countMintedNFTs.toNumber());\n    console.log(\"%d NFTs minted so far.\", countMintedNFTs.toNumber() - 1);\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    !ethereum ? console.log(\"Make sure you have metamask!\") : console.log(\"We have the ethereum object\", ethereum);\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      var _ethereum;\n\n      const {\n        ethereum\n      } = window;\n      (_ethereum = !ethereum) !== null && _ethereum !== void 0 ? _ethereum : alert(\"Get MetaMask!\");\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const checkIfWalletIsOnRinkeby = async () => {\n    var _ref;\n\n    const {\n      ethereum\n    } = window;\n    let chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    console.log(\"Connected to chain \" + chainId);\n    const rinkebyChainId = \"0x4\";\n    (_ref = chainId !== rinkebyChainId) !== null && _ref !== void 0 ? _ref : alert(\"You are not connected to the Rinkeby Test Network!\");\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        checkIfWalletIsOnRinkeby();\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          setLoading(false);\n          setIsNFTMinted(true);\n          setCurrentOpenSeaLink(`${OPENSEA_LINK}/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`); // alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        setIsNFTMinted(false);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setLoading(true);\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderOpenSeaLink = () => {\n    window.open(currentOpenSeaLink);\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Square NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mint-count\",\n          children: `${totalMintedNFTs - 1} OUT OF ${TOTAL_MINT_COUNT} MINTED`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI(), isNFTMinted && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button opensea-button\",\n          onClick: renderOpenSeaLink,\n          children: \"Check out on OpenSea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"loading-text\",\n          children: \"MINING... PLEASE WAIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-animation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), isNFTMinted && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"completed-text\",\n        children: \"NFT MINTED!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"MPlmM5tzb7OqGe+kzjo2lq3wyW8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cameronaragon/NFT/buildspace-nft/src/App.js"],"names":["React","useEffect","useState","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","totalMintedNFTs","setTotalMintedNFTs","loading","setLoading","isNFTMinted","setIsNFTMinted","currentOpenSeaLink","setCurrentOpenSeaLink","checkIfWalletIsConnected","getNFTData","ethereum","window","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","countMintedNFTs","getTotalNFTsMintedSoFar","toNumber","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","checkIfWalletIsOnRinkeby","chainId","rinkebyChainId","on","from","tokenId","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","renderOpenSeaLink","open","renderNotConnectedContainer","renderMintUI","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = 'camaragoon';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets';\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0xe293010D86817550e47556954A5285c91A10AE50\";\n\nconst App = () => {\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMintedNFTs, setTotalMintedNFTs] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [isNFTMinted, setIsNFTMinted] = useState(false);\n  const [currentOpenSeaLink, setCurrentOpenSeaLink] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getNFTData();\n  }, []);\n\n  const getNFTData = async () => {\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n    let countMintedNFTs = await connectedContract.getTotalNFTsMintedSoFar();\n    setTotalMintedNFTs(countMintedNFTs.toNumber());\n    console.log(\"%d NFTs minted so far.\", countMintedNFTs.toNumber() - 1);\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    !ethereum ? console.log(\"Make sure you have metamask!\") : console.log(\"We have the ethereum object\", ethereum);\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      !ethereum ?? alert(\"Get MetaMask!\");\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const checkIfWalletIsOnRinkeby = async () => {\n    const { ethereum } = window;\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    const rinkebyChainId = \"0x4\";\n    chainId !== rinkebyChainId ?? alert(\"You are not connected to the Rinkeby Test Network!\");\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        checkIfWalletIsOnRinkeby();\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          setLoading(false);\n          setIsNFTMinted(true);\n          setCurrentOpenSeaLink(`${OPENSEA_LINK}/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n          // alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        setIsNFTMinted(false);\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setLoading(true)\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        \n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderOpenSeaLink = () => {\n    window.open(currentOpenSeaLink)\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Square NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          <p className=\"mint-count\">{`${totalMintedNFTs - 1} OUT OF ${TOTAL_MINT_COUNT} MINTED`}</p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n          {isNFTMinted && <button className=\"cta-button opensea-button\" onClick={renderOpenSeaLink}>Check out on OpenSea</button>}\n        </div>\n        {loading && <div className=\"loading-container\">\n          <span className=\"loading-text\">MINING... PLEASE WAIT</span>\n          {/* <p className=\"loading-text\">MINING... PLEASE WAIT</p> */}\n          <div className=\"loading-animation\"></div>\n        </div>}\n        {isNFTMinted && <span className=\"completed-text\">NFT MINTED!</span>}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}