{"ast":null,"code":"import _regeneratorRuntime from\"/Users/cameronaragon/NFT/buildspace-nft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/cameronaragon/NFT/buildspace-nft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/cameronaragon/NFT/buildspace-nft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./styles/App.css';import twitterLogo from\"./assets/twitter-logo.svg\";import React,{useEffect,useState}from\"react\";import{ethers}from'ethers';import myEpicNft from'./utils/MyEpicNFT.json';// Constants\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TWITTER_HANDLE='camaragoon';var TWITTER_LINK=\"https://twitter.com/\".concat(TWITTER_HANDLE);var OPENSEA_LINK='https://testnets.opensea.io/assets';var TOTAL_MINT_COUNT=50;var CONTRACT_ADDRESS=\"0xe293010D86817550e47556954A5285c91A10AE50\";var App=function App(){// Render Methods\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),totalMintedNFTs=_useState4[0],setTotalMintedNFTs=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),loading=_useState6[0],setLoading=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isNFTMinted=_useState8[0],setIsNFTMinted=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),currentOpenSeaLink=_useState10[0],setCurrentOpenSeaLink=_useState10[1];useEffect(function(){checkIfWalletIsConnected();getNFTData();},[]);var getNFTData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,provider,signer,connectedContract,countMintedNFTs;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_window=window,ethereum=_window.ethereum;provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,myEpicNft.abi,signer);_context.next=6;return connectedContract.getTotalNFTsMintedSoFar();case 6:countMintedNFTs=_context.sent;setTotalMintedNFTs(countMintedNFTs.toNumber());console.log(\"%d NFTs minted so far.\",countMintedNFTs.toNumber()-1);case 9:case\"end\":return _context.stop();}}},_callee);}));return function getNFTData(){return _ref.apply(this,arguments);};}();var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,accounts,account;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_window2=window,ethereum=_window2.ethereum;!ethereum?console.log(\"Make sure you have metamask!\"):console.log(\"We have the ethereum object\",ethereum);_context2.next=4;return ethereum.request({method:'eth_accounts'});case 4:accounts=_context2.sent;if(accounts.length!==0){account=accounts[0];console.log(\"Found an authorized account:\",account);setCurrentAccount(account);setupEventListener();}else{console.log(\"No authorized account found\");}case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function checkIfWalletIsConnected(){return _ref2.apply(this,arguments);};}();var connectWallet=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _ethereum,_window3,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window3=window,ethereum=_window3.ethereum;(_ethereum=!ethereum)!==null&&_ethereum!==void 0?_ethereum:alert(\"Get MetaMask!\");_context3.next=5;return ethereum.request({method:'eth_requestAccounts'});case 5:accounts=_context3.sent;console.log(\"Connected\",accounts[0]);setCurrentAccount(accounts[0]);setupEventListener();_context3.next=14;break;case 11:_context3.prev=11;_context3.t0=_context3[\"catch\"](0);console.error(_context3.t0);case 14:case\"end\":return _context3.stop();}}},_callee3,null,[[0,11]]);}));return function connectWallet(){return _ref3.apply(this,arguments);};}();var checkIfWalletIsOnRinkeby=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _ref5;var _window4,ethereum,chainId,rinkebyChainId;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_window4=window,ethereum=_window4.ethereum;_context4.next=3;return ethereum.request({method:'eth_chainId'});case 3:chainId=_context4.sent;console.log(\"Connected to chain \"+chainId);rinkebyChainId=\"0x4\";(_ref5=chainId!==rinkebyChainId)!==null&&_ref5!==void 0?_ref5:alert(\"You are not connected to the Rinkeby Test Network!\");case 7:case\"end\":return _context4.stop();}}},_callee4);}));return function checkIfWalletIsOnRinkeby(){return _ref4.apply(this,arguments);};}();var setupEventListener=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var _window5,ethereum,provider,signer,connectedContract;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:try{_window5=window,ethereum=_window5.ethereum;if(ethereum){checkIfWalletIsOnRinkeby();provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,myEpicNft.abi,signer);connectedContract.on(\"NewEpicNFTMinted\",function(from,tokenId){console.log(from,tokenId.toNumber());setLoading(false);setIsNFTMinted(true);setCurrentOpenSeaLink(\"\".concat(OPENSEA_LINK,\"/\").concat(CONTRACT_ADDRESS,\"/\").concat(tokenId.toNumber()));// alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n});console.log(\"Setup event listener!\");}else{console.log(\"Ethereum object doesn't exist!\");}}catch(error){console.log(error);}case 1:case\"end\":return _context5.stop();}}},_callee5);}));return function setupEventListener(){return _ref6.apply(this,arguments);};}();var askContractToMintNft=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var _window6,ethereum,provider,signer,connectedContract,nftTxn;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;_window6=window,ethereum=_window6.ethereum;if(!ethereum){_context6.next=19;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();connectedContract=new ethers.Contract(CONTRACT_ADDRESS,myEpicNft.abi,signer);setIsNFTMinted(false);console.log(\"Going to pop wallet now to pay gas...\");_context6.next=10;return connectedContract.makeAnEpicNFT();case 10:nftTxn=_context6.sent;setLoading(true);console.log(\"Mining...please wait.\");_context6.next=15;return nftTxn.wait();case 15:console.log(nftTxn);console.log(\"Mined, see transaction: https://rinkeby.etherscan.io/tx/\".concat(nftTxn.hash));_context6.next=20;break;case 19:console.log(\"Ethereum object doesn't exist!\");case 20:_context6.next=25;break;case 22:_context6.prev=22;_context6.t0=_context6[\"catch\"](0);console.log(_context6.t0);case 25:case\"end\":return _context6.stop();}}},_callee6,null,[[0,22]]);}));return function askContractToMintNft(){return _ref7.apply(this,arguments);};}();var renderOpenSeaLink=function renderOpenSeaLink(){window.open(currentOpenSeaLink);};var renderNotConnectedContainer=function renderNotConnectedContainer(){return/*#__PURE__*/_jsx(\"button\",{onClick:connectWallet,className:\"cta-button connect-wallet-button\",children:\"Connect to Wallet\"});};var renderMintUI=function renderMintUI(){return/*#__PURE__*/_jsx(\"button\",{onClick:askContractToMintNft,className:\"cta-button connect-wallet-button\",children:\"Mint NFT\"});};return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-container\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"header gradient-text\",children:\"Square NFT Collection\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sub-text\",children:\"Each unique. Each beautiful. Discover your NFT today.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mint-count\",children:\"\".concat(totalMintedNFTs-1,\" OUT OF \").concat(TOTAL_MINT_COUNT,\" MINTED\")}),currentAccount===\"\"?renderNotConnectedContainer():renderMintUI(),isNFTMinted&&/*#__PURE__*/_jsx(\"button\",{className:\"cta-button opensea-button\",onClick:renderOpenSeaLink,children:\"Check out on OpenSea\"})]}),loading&&/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"loading-text\",children:\"MINING... PLEASE WAIT\"}),/*#__PURE__*/_jsx(\"div\",{className:\"loading-animation\"})]}),isNFTMinted&&/*#__PURE__*/_jsx(\"span\",{className:\"completed-text\",children:\"NFT MINTED!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"footer-container\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"Twitter Logo\",className:\"twitter-logo\",src:twitterLogo}),/*#__PURE__*/_jsx(\"a\",{className:\"footer-text\",href:TWITTER_LINK,target:\"_blank\",rel:\"noreferrer\",children:\"built by @\".concat(TWITTER_HANDLE)})]})]})});};export default App;","map":{"version":3,"sources":["/Users/cameronaragon/NFT/buildspace-nft/src/App.js"],"names":["React","useEffect","useState","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","totalMintedNFTs","setTotalMintedNFTs","loading","setLoading","isNFTMinted","setIsNFTMinted","currentOpenSeaLink","setCurrentOpenSeaLink","checkIfWalletIsConnected","getNFTData","window","ethereum","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","getTotalNFTsMintedSoFar","countMintedNFTs","toNumber","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","error","checkIfWalletIsOnRinkeby","chainId","rinkebyChainId","on","from","tokenId","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","renderOpenSeaLink","open","renderNotConnectedContainer","renderMintUI","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = 'camaragoon';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets';\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0xe293010D86817550e47556954A5285c91A10AE50\";\n\nconst App = () => {\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMintedNFTs, setTotalMintedNFTs] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [isNFTMinted, setIsNFTMinted] = useState(false);\n  const [currentOpenSeaLink, setCurrentOpenSeaLink] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getNFTData();\n  }, []);\n\n  const getNFTData = async () => {\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n    let countMintedNFTs = await connectedContract.getTotalNFTsMintedSoFar();\n    setTotalMintedNFTs(countMintedNFTs.toNumber());\n    console.log(\"%d NFTs minted so far.\", countMintedNFTs.toNumber() - 1);\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    !ethereum ? console.log(\"Make sure you have metamask!\") : console.log(\"We have the ethereum object\", ethereum);\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      !ethereum ?? alert(\"Get MetaMask!\");\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const checkIfWalletIsOnRinkeby = async () => {\n    const { ethereum } = window;\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    const rinkebyChainId = \"0x4\";\n    chainId !== rinkebyChainId ?? alert(\"You are not connected to the Rinkeby Test Network!\");\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        checkIfWalletIsOnRinkeby();\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          setLoading(false);\n          setIsNFTMinted(true);\n          setCurrentOpenSeaLink(`${OPENSEA_LINK}/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n          // alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        setIsNFTMinted(false);\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setLoading(true)\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        \n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderOpenSeaLink = () => {\n    window.open(currentOpenSeaLink)\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Square NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          <p className=\"mint-count\">{`${totalMintedNFTs - 1} OUT OF ${TOTAL_MINT_COUNT} MINTED`}</p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n          {isNFTMinted && <button className=\"cta-button opensea-button\" onClick={renderOpenSeaLink}>Check out on OpenSea</button>}\n        </div>\n        {loading && <div className=\"loading-container\">\n          <span className=\"loading-text\">MINING... PLEASE WAIT</span>\n          {/* <p className=\"loading-text\">MINING... PLEASE WAIT</p> */}\n          <div className=\"loading-animation\"></div>\n        </div>}\n        {isNFTMinted && <span className=\"completed-text\">NFT MINTED!</span>}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}