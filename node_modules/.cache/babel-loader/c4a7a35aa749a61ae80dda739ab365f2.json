{"ast":null,"code":"var _jsxFileName = \"/Users/cameronaragon/NFT/buildspace-nft/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'camaragoon';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0x1404bA40539F4958ed7a773082f58F593b0dE83B\";\n\nconst App = () => {\n  _s();\n\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMintedNFTs, setTotalMintedNFTs] = useState(0);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    !ethereum ? console.log(\"Make sure you have metamask!\") : console.log(\"We have the ethereum object\", ethereum);\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      var _ethereum;\n\n      const {\n        ethereum\n      } = window;\n      (_ethereum = !ethereum) !== null && _ethereum !== void 0 ? _ethereum : alert(\"Get MetaMask!\");\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const checkIfWalletIsOnRinkeby = async () => {\n    var _ref;\n\n    const {\n      ethereum\n    } = window;\n    let chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    console.log(\"Connected to chain \" + chainId);\n    const rinkebyChainId = \"0x4\";\n    (_ref = chainId !== rinkebyChainId) !== null && _ref !== void 0 ? _ref : alert(\"You are not connected to the Rinkeby Test Network!\");\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        checkIfWalletIsOnRinkeby();\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          setLoading(false);\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setLoading(true);\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        let countMintedNFTs = await connectedContract.getTotalNFTsMintedSoFar();\n        setTotalMintedNFTs(countMintedNFTs.toNumber());\n        console.log(\"%d NFTs minted so far.\", totalMintedNFTs);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mint-count\",\n          children: `${totalMintedNFTs} OUT OF ${TOTAL_MINT_COUNT} MINTED`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"loading-text\",\n          children: \"MINING... PLEASE WAIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-animation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"sz8bLq4uyepFlcF1t1okEmp3ySA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/cameronaragon/NFT/buildspace-nft/src/App.js"],"names":["React","useEffect","useState","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","totalMintedNFTs","setTotalMintedNFTs","loading","setLoading","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","checkIfWalletIsOnRinkeby","chainId","rinkebyChainId","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","countMintedNFTs","getTotalNFTsMintedSoFar","renderNotConnectedContainer","renderMintUI","twitterLogo"],"mappings":"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","sourcesContent":["import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = 'camaragoon';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0x1404bA40539F4958ed7a773082f58F593b0dE83B\";\n\nconst App = () => {\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMintedNFTs, setTotalMintedNFTs] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    !ethereum ? console.log(\"Make sure you have metamask!\") : console.log(\"We have the ethereum object\", ethereum);\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      !ethereum ?? alert(\"Get MetaMask!\");\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const checkIfWalletIsOnRinkeby = async () => {\n    const { ethereum } = window;\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    const rinkebyChainId = \"0x4\";\n    chainId !== rinkebyChainId ?? alert(\"You are not connected to the Rinkeby Test Network!\");\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        checkIfWalletIsOnRinkeby();\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          setLoading(false);\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setLoading(true)\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n        let countMintedNFTs = await connectedContract.getTotalNFTsMintedSoFar();\n        setTotalMintedNFTs(countMintedNFTs.toNumber());\n        console.log(\"%d NFTs minted so far.\", totalMintedNFTs);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          <p className=\"mint-count\">{`${totalMintedNFTs} OUT OF ${TOTAL_MINT_COUNT} MINTED`}</p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n        </div>\n\n        {loading && <div className=\"loading-container\">\n          <p className=\"loading-text\">MINING... PLEASE WAIT</p>\n          <div className=\"loading-animation\"></div>\n        </div>}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}