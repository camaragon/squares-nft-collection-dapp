{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","totalMintedNFTs","setTotalMintedNFTs","loading","setLoading","isNFTMinted","setIsNFTMinted","currentOpenSeaLink","setCurrentOpenSeaLink","useEffect","checkIfWalletIsConnected","getNFTData","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","getTotalNFTsMintedSoFar","countMintedNFTs","toNumber","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","error","checkIfWalletIsOnRinkeby","chainId","on","from","tokenId","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","className","onClick","open","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d626630.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = 'camaragoon';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = 'https://testnets.opensea.io/assets';\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0xe293010D86817550e47556954A5285c91A10AE50\";\n\nconst App = () => {\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalMintedNFTs, setTotalMintedNFTs] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [isNFTMinted, setIsNFTMinted] = useState(false);\n  const [currentOpenSeaLink, setCurrentOpenSeaLink] = useState(\"\");\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getNFTData();\n  }, []);\n\n  const getNFTData = async () => {\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n    let countMintedNFTs = await connectedContract.getTotalNFTsMintedSoFar();\n    setTotalMintedNFTs(countMintedNFTs.toNumber());\n    console.log(\"%d NFTs minted so far.\", countMintedNFTs.toNumber() - 1);\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    !ethereum ? console.log(\"Make sure you have metamask!\") : console.log(\"We have the ethereum object\", ethereum);\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      !ethereum ?? alert(\"Get MetaMask!\");\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener();\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const checkIfWalletIsOnRinkeby = async () => {\n    const { ethereum } = window;\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    const rinkebyChainId = \"0x4\";\n    chainId !== rinkebyChainId ?? alert(\"You are not connected to the Rinkeby Test Network!\");\n  }\n\n  const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        checkIfWalletIsOnRinkeby();\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          setLoading(false);\n          setIsNFTMinted(true);\n          setCurrentOpenSeaLink(`${OPENSEA_LINK}/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n          // alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        setIsNFTMinted(false);\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setLoading(true)\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        \n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderOpenSeaLink = () => {\n    window.open(currentOpenSeaLink)\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Square NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          <p className=\"mint-count\">{`${totalMintedNFTs - 1} OUT OF ${TOTAL_MINT_COUNT} MINTED`}</p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n          {isNFTMinted && <button className=\"cta-button opensea-button\" onClick={renderOpenSeaLink}>Check out on OpenSea</button>}\n        </div>\n        {loading && <div className=\"loading-container\">\n          <span className=\"loading-text\">MINING... PLEASE WAIT</span>\n          {/* <p className=\"loading-text\">MINING... PLEASE WAIT</p> */}\n          <div className=\"loading-animation\"></div>\n        </div>}\n        {isNFTMinted && <span className=\"completed-text\">NFT MINTED!</span>}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}